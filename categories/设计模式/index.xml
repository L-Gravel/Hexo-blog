<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>设计模式 on Gravel`s blogs</title><link>https://leongravel.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 设计模式 on Gravel`s blogs</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 14 Jul 2018 18:01:41 +0000</lastBuildDate><atom:link href="https://leongravel.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker部署zabbix填坑指南</title><link>https://leongravel.com/post/zabbix-docker/</link><pubDate>Tue, 11 Feb 2020 20:54:41 +0000</pubDate><guid>https://leongravel.com/post/zabbix-docker/</guid><description>&lt;p>Zabbix 是由 Alexei Vladishev 开发的一种网络监视、管理系统，基于 Server-Client 架构。可用于监视各种网络服务、服务器和网络机器等状态。这里我简单写一下自己在使用 docker 部署 zabbix 中遇到的坑。&lt;/p></description></item><item><title>安卓 9.0 刷机跳过开机验证</title><link>https://leongravel.com/post/android-setup/</link><pubDate>Wed, 01 Jan 2020 00:01:41 +0000</pubDate><guid>https://leongravel.com/post/android-setup/</guid><description>&lt;p>昨天跨年夜给自己的老破旧刷机，双清之前忘记退出 Google 账号，导致无法正常跳过开机向导。这里简单记录一下解决方案。&lt;/p></description></item><item><title>idea Refreshing files 卡顿</title><link>https://leongravel.com/post/idea-refreshing-files/</link><pubDate>Mon, 18 Nov 2019 18:01:41 +0000</pubDate><guid>https://leongravel.com/post/idea-refreshing-files/</guid><description>Idea 切换maven仓库之后，重新构建老是卡住。。如图所示。 按照 https://intellij-support.jetbrains.com/hc/en-us/community/posts/360000027164-Refreshing-files-takes-way-tool-long-often-before-building- 的操作提示，File&amp;rdquo; -&amp;gt; &amp;ldquo;Invalidate Caches and Restart&amp;rdquo; 重启之后，得到解决。</description></item><item><title>Springboot@Cacheable 不生效</title><link>https://leongravel.com/post/springbootcacheable-%E4%B8%8D%E7%94%9F%E6%95%88/</link><pubDate>Tue, 16 Jul 2019 20:54:41 +0000</pubDate><guid>https://leongravel.com/post/springbootcacheable-%E4%B8%8D%E7%94%9F%E6%95%88/</guid><description>最近在项目中使用了Guava缓存，使用方式是用Spring提供的 @Cacheable 注解的方式，在使用的过程中，遇到了缓存不生效的情况。 Spring 使用@Cacheab</description></item><item><title>azkaban回调配置</title><link>https://leongravel.com/post/azkaban%E5%9B%9E%E8%B0%83%E9%85%8D%E7%BD%AE/</link><pubDate>Sat, 06 Jul 2019 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/azkaban%E5%9B%9E%E8%B0%83%E9%85%8D%E7%BD%AE/</guid><description>azkaban 是linkin开源的一套简单的任务调度服务系统。如果需要配置任务的状态回调，那么需要加入以下配置： type=command job.notification.started.1.url = http://10.20.115.20:9527/index/callback?message=started&amp;amp;server=?{server}&amp;amp;project=?{project}&amp;amp;flow=?{flow}&amp;amp;executionId=?{executionId}&amp;amp;job=?{job}&amp;amp;status=?{status} job.notification.success.1.url = http://10.20.115.20:9527/index/callback?message=success&amp;amp;server=?{server}&amp;amp;project=?{project}&amp;amp;flow=?{flow}&amp;amp;executionId=?{executionId}&amp;amp;job=?{job}&amp;amp;status=?{status} job.notification.failure.1.url = http://10.20.115.20:9527/index/callback?message=failure&amp;amp;server=?{server}&amp;amp;project=?{project}&amp;amp;flow=?{flow}&amp;amp;executionId=?{executionId}&amp;amp;job=?{job}&amp;amp;status=?{status} job.notification.completed.1.url = http://10.20.115.20:9527/index/callback?message=completed&amp;amp;server=?{server}&amp;amp;project=?{project}&amp;amp;flow=?{flow}&amp;amp;executionId=?{executionId}&amp;amp;job=?{job}&amp;amp;status=?{status} command=exit -1 dependencies=callback 其中主要</description></item><item><title>使用implala连接hive报错</title><link>https://leongravel.com/post/%E4%BD%BF%E7%94%A8implala%E8%BF%9E%E6%8E%A5hive%E6%8A%A5%E9%94%99/</link><pubDate>Mon, 01 Jul 2019 20:54:41 +0000</pubDate><guid>https://leongravel.com/post/%E4%BD%BF%E7%94%A8implala%E8%BF%9E%E6%8E%A5hive%E6%8A%A5%E9%94%99/</guid><description>&lt;p>今天在使用&lt;code>implala&lt;/code> 连接 &lt;code>hive&lt;/code> 数据库的时候，出现了一个错误。&lt;/p></description></item><item><title>pandas 使用技巧总结（持续更新）</title><link>https://leongravel.com/post/pandas-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 30 Jun 2019 20:54:41 +0000</pubDate><guid>https://leongravel.com/post/pandas-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</guid><description>pandas 对指定列做fillna df.fillna({'code':'code', 'date':'date'}) df.[[&amp;quot;code&amp;quot;, &amp;quot;date&amp;quot;]].fillna(&amp;quot;&amp;quot;) pandas 指定列重命名 df.rename(columns={&amp;quot;amount&amp;quot;: &amp;quot;total_amount&amp;quot;}, inplace=True) DataFrame 按直接列left join合并 df = pd.merge(df_1, df_2, on=[&amp;quot;code&amp;quot;, &amp;quot;date&amp;quot;], how='left') DataFrame 两列相加相减 df[&amp;quot;amount&amp;quot;] = df[&amp;quot;total_amount&amp;quot;] - df[&amp;quot;amount&amp;quot;] df[&amp;quot;amount&amp;quot;] = df[&amp;quot;total_amount&amp;quot;] + df[&amp;quot;amount&amp;quot;]</description></item><item><title>python脚本引用同级文件夹中的方法</title><link>https://leongravel.com/post/python%E8%84%9A%E6%9C%AC%E5%BC%95%E7%94%A8%E5%90%8C%E7%BA%A7%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 29 Apr 2019 21:01:41 +0000</pubDate><guid>https://leongravel.com/post/python%E8%84%9A%E6%9C%AC%E5%BC%95%E7%94%A8%E5%90%8C%E7%BA%A7%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95/</guid><description>目录结构为： ├── dataprocess │ ├── config │ ├── ├──dbconfig.py // 具体代码. │ ├── test.py 需要在test.py脚本中引用dbconfig.py</description></item><item><title>使用git rebase合并多个commit提交</title><link>https://leongravel.com/post/%E4%BD%BF%E7%94%A8gitrebase%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAcommit%E6%8F%90%E4%BA%A4/</link><pubDate>Wed, 27 Feb 2019 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/%E4%BD%BF%E7%94%A8gitrebase%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAcommit%E6%8F%90%E4%BA%A4/</guid><description>&lt;p>在日常开发中，常常会遇到自己正在开发某个&lt;code>feature&lt;/code>的时候，需要切到另外的分支去处理&lt;code>bug&lt;/code>。于是先将未完成的功能&lt;code>commit&lt;/code>到本地。处理完&lt;code>bug&lt;/code>之后，再切回来开发，这种做法有一个坏处是，仓库&lt;code>commit&lt;/code>的历史会很凌乱。不利于追踪排查历史问题。&lt;/p></description></item><item><title>基于Alpine的基础镜像构建</title><link>https://leongravel.com/post/%E5%9F%BA%E4%BA%8Ealpine%E7%9A%84%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/</link><pubDate>Sat, 23 Feb 2019 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/%E5%9F%BA%E4%BA%8Ealpine%E7%9A%84%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/</guid><description>&lt;p>刚开始在项目中使用docker的时候，使用的是centos作为基础镜像。centos的官方镜像有70M左右。加上jdk、tomcat，一个完整的业务系统，可能有450M左右。在项目组同学去试用部署的时候，所以的应用包加上服务包，有点过于大了。而且以centos作为基础镜像，可能包含很多我们并不需要的功能。所以，决定转用alpine。&lt;/p></description></item><item><title>docker导出镜像压缩包</title><link>https://leongravel.com/post/docker%E5%AF%BC%E5%87%BA%E9%95%9C%E5%83%8F%E5%8E%8B%E7%BC%A9%E5%8C%85/</link><pubDate>Mon, 18 Feb 2019 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/docker%E5%AF%BC%E5%87%BA%E9%95%9C%E5%83%8F%E5%8E%8B%E7%BC%A9%E5%8C%85/</guid><description>&lt;p>网上关于&lt;code>docker&lt;/code>镜像的导出导入的文章已经很多了，无非是&lt;code>save&lt;/code>、&lt;code>export&lt;/code> 、&lt;code>load&lt;/code>、&lt;code>import&lt;/code> 这几个命令，我这里只是简单记录一下今天遇到的一个特殊情况。&lt;/p></description></item><item><title>给Docker容器设置固定ip</title><link>https://leongravel.com/post/%E7%BB%99docker%E5%AE%B9%E5%99%A8%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9Aip/</link><pubDate>Mon, 11 Feb 2019 20:54:41 +0000</pubDate><guid>https://leongravel.com/post/%E7%BB%99docker%E5%AE%B9%E5%99%A8%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9Aip/</guid><description>&lt;p>今天在查应用日志的时候，发现日志收集分析的应用，收到很多&lt;code>ip&lt;/code>发来的同一系统的日志。经分析发现，这么多ip都是出自三台机器，由于过年期间有些机器有过断电重启的情况，所以 &lt;code>docker&lt;/code> 给这个应用重新赋予了&lt;code>ip&lt;/code>，导致了以上的情况出现，日志分析应用，无法知道这个日志的准确来源。&lt;/p></description></item><item><title>gitlab-CI常见问题整理</title><link>https://leongravel.com/post/gitlab-ci%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</link><pubDate>Mon, 07 Jan 2019 00:01:41 +0000</pubDate><guid>https://leongravel.com/post/gitlab-ci%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</guid><description>&lt;p>整理一下自己在工作中踩过的关于&lt;code>gitlab-CI&lt;/code>的坑。&lt;/p></description></item><item><title>minio设置永久下载链接</title><link>https://leongravel.com/post/minio%E8%AE%BE%E7%BD%AE%E6%B0%B8%E4%B9%85%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5/</link><pubDate>Wed, 05 Dec 2018 10:01:41 +0000</pubDate><guid>https://leongravel.com/post/minio%E8%AE%BE%E7%BD%AE%E6%B0%B8%E4%B9%85%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5/</guid><description>&lt;p>今天在构建&lt;a href="https://hub.docker.com/r/leebroncc/alpine-oraclejdk7"> &lt;code>oraclejdk7&lt;/code> 镜像&lt;/a>的时候，为了方便自己以后能够随时编译 &lt;code>jdk&lt;/code> 镜像，于是将 &lt;code>oracle-jdk-7&lt;/code> 的 &lt;code>tar.gz&lt;/code> 包上传到了 &lt;code>minio&lt;/code> 服务器上，可以直接使用 &lt;code>wget&lt;/code> 命令随时下载。&lt;/p></description></item><item><title>gitlab CI vs jenkins 如何选择</title><link>https://leongravel.com/post/gitlab-ci-vs-jenkins-%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9/</link><pubDate>Sun, 04 Nov 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/gitlab-ci-vs-jenkins-%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9/</guid><description>&lt;p>之前在项目中做过CI的技术选型，基本成熟之后，现在来总结一下两者的优劣。&lt;/p></description></item><item><title>解决docker 容器内访问宿主机“No route to host”的问题</title><link>https://leongravel.com/post/%E8%A7%A3%E5%86%B3docker-%E5%AE%B9%E5%99%A8%E5%86%85%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BAno-route-to-host%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 04 Nov 2018 20:54:41 +0000</pubDate><guid>https://leongravel.com/post/%E8%A7%A3%E5%86%B3docker-%E5%AE%B9%E5%99%A8%E5%86%85%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BAno-route-to-host%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>&lt;p>首先确认是否已经关闭防火墙； 请顺序运行以下命令：&lt;/p></description></item><item><title>使用BFG给git仓库瘦身</title><link>https://leongravel.com/post/%E4%BD%BF%E7%94%A8bfg%E7%BB%99git%E4%BB%93%E5%BA%93%E7%98%A6%E8%BA%AB/</link><pubDate>Thu, 01 Nov 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/%E4%BD%BF%E7%94%A8bfg%E7%BB%99git%E4%BB%93%E5%BA%93%E7%98%A6%E8%BA%AB/</guid><description>&lt;p>今天遇到一个问题，如何给一个gitlab的仓库瘦身。在我们日常开发中，由于不规范或者不小心，误提交了一些大文件，导致git的仓库变得很大，这是你直接删除大文件也无济于事，因为git commit log里面，会记录你每一次的提交详情。一般来说，给git瘦身有两种方式，一种是官方提供的&lt;code>git-filter-branch&lt;/code>,这种命令用起来极为繁琐。另一种是本文将要说到的BFG.&lt;/p></description></item><item><title>使用wget下载minio中的内容报错</title><link>https://leongravel.com/post/minio%E4%B8%8B%E8%BD%BD%E6%8A%A5%E9%94%99/</link><pubDate>Tue, 30 Oct 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/minio%E4%B8%8B%E8%BD%BD%E6%8A%A5%E9%94%99/</guid><description>&lt;h3 id="问题描述">问题描述&lt;/h3>
&lt;p>在构建jdk镜像的时候，由于无法直接从oracle上获取到jdk的压缩包，所以我把压缩包放到minio上，通过wget下载（实际上是多此一举，可以直接ADD进去）。但是我在用wget下载minio的数据的时候，直接报错了。&lt;/p></description></item><item><title>docker安装目录迁移</title><link>https://leongravel.com/post/docker%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95%E8%BF%81%E7%A7%BB/</link><pubDate>Sat, 20 Oct 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/docker%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95%E8%BF%81%E7%A7%BB/</guid><description>&lt;p>&lt;code>docker&lt;/code>默认安装路径是&lt;code>var/lib/docker&lt;/code>这个目录下面的，如果这个目录挂载的空间不大的话，那么在实际使用中，可能会导致&lt;code>docker&lt;/code>空间不足的情况，我们需要将这个默认目录迁移到比较大的空间下面去。&lt;/p></description></item><item><title>docker-compose搭建flink环境</title><link>https://leongravel.com/post/docker-compose%E6%90%AD%E5%BB%BAflink%E7%8E%AF%E5%A2%83/</link><pubDate>Mon, 15 Oct 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/docker-compose%E6%90%AD%E5%BB%BAflink%E7%8E%AF%E5%A2%83/</guid><description>&lt;p>嗯，最近在搭建flink的环境，用普通的 &lt;code>docker&lt;/code> 命令构建的时候，老是遇到各种的问题。于是转为用 &lt;code>docker-compose&lt;/code> 试试。&lt;/p></description></item></channel></rss>