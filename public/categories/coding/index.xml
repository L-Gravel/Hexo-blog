<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on Gravel</title>
    <link>https://leongravel.com/categories/coding/</link>
    <description>Recent content in Coding on Gravel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Mon, 19 Mar 2018 21:18:41 +0000</lastBuildDate>
    
	<atom:link href="https://leongravel.com/categories/coding/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>postgreSQL 日期函数整理</title>
      <link>https://leongravel.com/posts/postgresql-date-functions/</link>
      <pubDate>Mon, 19 Mar 2018 21:18:41 +0000</pubDate>
      
      <guid>https://leongravel.com/posts/postgresql-date-functions/</guid>
      <description>最近在项目中维护某一张表的固定数据的时候，经常会用到postgreSQL的各种日期函数，所以简单整理一下。获取系统时间的函数 获取当前完整时间  通过now()获取的时间是最完整的时间，包括时区，秒也保留到了6位小数。  select now(); -- 得到如下结果 &#39;2018-03-19 21:28:31.545145+08&#39;  current_timestamp 效果是和now()一样的。
select current_timestamp效果是和now; -- 得到如下结果 &#39;2018-03-19 21:29:31.545145+08&#39;  获取当前时间 current_time 只显示当前的时间，不包括日期
select current_time; -- 得到的结果如下 21:29:31.545145+08&#39;  获取当前日期 current_date 只显示当前的日期，不包括小时等信息
select current_date; -- 得到的结果如下 &#39;2018-03-19&#39;   日期计算函数 日期简单的加减  一年后  select now() + interval &#39;1 years&#39;; select now() + interval &#39;1 year&#39;; select now() + interval &#39;1 y&#39;; select now() + interval &#39;2 Y&#39;; select now() + interval &#39;2Y&#39;;  这几种写法都OK的。 一个月后  select now() + interval &#39;1 month&#39;;  一周后  select now() + interval &#39;1 week&#39;;  一天后  select now() + &#39;1 day&#39;  一分钟后  select now() + &#39;1 min&#39;;   interval 可以不写，其值可以是：</description>
    </item>
    
    <item>
      <title>【转载】java.lang.String</title>
      <link>https://leongravel.com/posts/java.lang.string/</link>
      <pubDate>Mon, 12 Mar 2018 20:54:41 +0000</pubDate>
      
      <guid>https://leongravel.com/posts/java.lang.string/</guid>
      <description>整理一下关于String类的方法。
 概览 继承结构  Serializable CharSequence Comparable  字符集简介 重要域成员 重要方法  代码点及代码单元 比较 搜索 提取子串 创建全大写/全小写副本  一些体会 参考  概览 String 类代表了字符串。所有类似于 &amp;quot;abc&amp;quot; 的字符串字面量都是该类的实例。
字符串是常量，从创建后就不可更改。需要修改的字符串可以使用 StringBuffer。因为 String 实例不可变，所以他们可以安全的共享。一些例子：
String str = &amp;quot;abc&amp;quot;; // 与上面一行代码效果相同 char data[] = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;}; String str = new String(data); System.out.println(&amp;quot;abc&amp;quot;); String cde = &amp;quot;cde&amp;quot;; System.out.println(&amp;quot;abc&amp;quot; + cde); String c = &amp;quot;abc&amp;quot;.substring(2,3); String d = cde.substring(1, 2);  String 类也包含了一些对单个字符的操作、比较、搜索、提取子串、创建全大写/全小写副本的方法。
Java 语言为字符串连接操作符(+)添加了特殊支持。向左连接。</description>
    </item>
    
    <item>
      <title>git 生成SSH key</title>
      <link>https://leongravel.com/posts/%E7%94%9F%E6%88%90ssh-key/</link>
      <pubDate>Sun, 11 Mar 2018 20:54:41 +0000</pubDate>
      
      <guid>https://leongravel.com/posts/%E7%94%9F%E6%88%90ssh-key/</guid>
      <description>使用git的过程中，我们会初始化创建关联服务器的SSH key。
1 设置用户名和邮箱 开发过程中，提交的时候会在log中显示用户名和密码，便于管理。
$ git config --global user.name &amp;quot;gravel&amp;quot; $ git config --global user.email &amp;quot;leebroncc@gmail.com&amp;quot;  2 检查现有的SSH keys 在创建SSH keys之前，我们可以看看电脑内是否有SSH keys秘钥。
打开Terminal输入如下命令。
$ ls -al ~/.ssh  或输入
$ ls ~/.ssh  如果看见如下文件，则代表SSH keys已创建好。
 id_dsa.pub id_ecdsa.pub id_ed25519.pub id_rsa.pub  查看已创建好的SSH key，使用如下命令。
$ cat ~/.ssh/id_rsa.pub  3 生成新的SSH key 如果没创建SSH key，我们可以创建新的SSH key。
1 设置电子邮件并创建对应的key
$ ssh-keygen -t rsa -b 4096 -C &amp;quot;your_email@example.com&amp;quot; # Creates a new ssh key, using the provided email as a label Generating public/private rsa key pair.</description>
    </item>
    
  </channel>
</rss>