<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Gravel</title>
    <link>https://leongravel.com/categories/java/</link>
    <description>Recent content in Java on Gravel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Fri, 28 Sep 2018 23:01:41 +0000</lastBuildDate>
    
	<atom:link href="https://leongravel.com/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dubbo在Docker中的服务注册</title>
      <link>https://leongravel.com/posts/dubbo%E5%9C%A8docker%E4%B8%AD%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C/</link>
      <pubDate>Fri, 28 Sep 2018 23:01:41 +0000</pubDate>
      
      <guid>https://leongravel.com/posts/dubbo%E5%9C%A8docker%E4%B8%AD%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C/</guid>
      <description>&lt;p&gt;今天在部署的时候，发现服务提供者启动成功，但是消费者没法拿到服务。查了下发现是服务提供者没注册成功。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>java-String知识点汇总</title>
      <link>https://leongravel.com/posts/%E5%85%B3%E4%BA%8Ejava-string%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB-md/</link>
      <pubDate>Wed, 26 Sep 2018 23:01:41 +0000</pubDate>
      
      <guid>https://leongravel.com/posts/%E5%85%B3%E4%BA%8Ejava-string%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB-md/</guid>
      <description>&lt;p&gt;Java 的 String 类几乎是 Java 中最常使用到的对象类型，关于 String 的一些基础知识对开发者来说显得尤为重要。下面就对 String 相关的一些知识点进行列举和归纳，希望能够加深对 String 对象的认识。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tomcat启动报错</title>
      <link>https://leongravel.com/posts/tomcat%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/</link>
      <pubDate>Fri, 21 Sep 2018 23:01:41 +0000</pubDate>
      
      <guid>https://leongravel.com/posts/tomcat%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/</guid>
      <description>&lt;p&gt;tomcat 启动报错&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>引入spring-cloud-starter-openfeign后有些类找不到</title>
      <link>https://leongravel.com/posts/springcloud-%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 03 Sep 2018 23:01:41 +0000</pubDate>
      
      <guid>https://leongravel.com/posts/springcloud-%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;今天用ali maven重新导入的spring-cloud-starter-openfeign&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Base64转CommonsMultipartFile</title>
      <link>https://leongravel.com/posts/base64/</link>
      <pubDate>Mon, 27 Aug 2018 23:01:41 +0000</pubDate>
      
      <guid>https://leongravel.com/posts/base64/</guid>
      <description>&lt;p&gt;今天在项目中遇到一个问题，需要把Base64的字符串转为CommonsMultipartFile。
首先需要对Base64的字符串进行解码&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>schedule</title>
      <link>https://leongravel.com/posts/schedule/</link>
      <pubDate>Wed, 01 Aug 2018 23:01:41 +0000</pubDate>
      
      <guid>https://leongravel.com/posts/schedule/</guid>
      <description>最近使用 spring boot、 quartz、H2(内存数据库) 以及 RabbitMQ 等实现了一个动态的任务管理系统，可以动态的进行任务的创建、修改、暂停、运行以及删除操作，并且使用了 RabbitMQ 消息队列实现了定时任务系统与具体业务系统的解耦，再也不需要每次加个定时任务都上线一次了。
Java 实现定时任务的几种方式对比 目前 Java 系统中实现调度任务的方式大体有一下三种：
 使用 JDK 自带的 java.util.Timer 及 java.util.TimerTask 类实现 使用 Spring 定时任务 使用第三方插件 Quartz  如果是在纯粹的 Java 环境需要实现定时任务毫无疑问就使用 JDK 自带的java.util.concurrent.ScheduledExecutorService 替代 Timer &amp;amp; TimerTask 实现即可，这种场景一般比较简单，也不存在集群的问题。
如果是集成 Spring 框架开发应用，则使用 Spring 的 @Scheduled 注解实现，简洁方便省事。但是此类应用很可能是集群部署，因此需要通过一定的途径避免集群环境下任务被多次调用的现象发生。常见的方法有使用 Redis 存储一个会过期的常量锁，每台容器执行器先读取锁变量值判断任务是否已被执行；另一种常见的方法是只让指定IP的容器执行定时任务（存在单点的问题）。
如果在集群环境下，想实现定时任务的可视化管理，或者想做一个统一的定时任务应用，亦或者定时任务的场景非常复杂，则建议使用企业级应用系统常用的 Quartz，而且现在 Spring 或者 Springboot 集成Quartz 也非常方便。
Spring Boot + Quartz 任务调度系统预览 源码：https://github.com/LeonGravel/springboot-quartz
预览：
这里也将常规的 Quartz 与 Spring 的整合过程记录如下。
实现步骤 添加依赖 &amp;lt;!-- Includes spring&#39;s support classes for quartz --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>java基础以及进阶知识点总结</title>
      <link>https://leongravel.com/posts/java%E5%9F%BA%E7%A1%80%E4%BB%A5%E5%8F%8A%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 15 Jul 2018 23:01:41 +0000</pubDate>
      
      <guid>https://leongravel.com/posts/java%E5%9F%BA%E7%A1%80%E4%BB%A5%E5%8F%8A%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h3 id=&#34;抽象类和接口的比较&#34;&gt;抽象类和接口的比较&lt;/h3&gt;

&lt;p&gt;相同点：&lt;br /&gt;
都不能被实例化&lt;br /&gt;
都包含抽象方法，这些抽象方法用于描述系统能提供哪些服务，而这些服务是由子类来提供实现的&lt;br /&gt;
在系统设计上，两者都代表系统的抽象层，当一个系统使用一棵继承树上的类时，应该尽量把引用变量声明为继承树的上层抽象类型，这样可以提高两个系统之间的松耦合&lt;br /&gt;
不同点：&lt;br /&gt;
在抽象类中可以为部分方法提供默认的实现，从而避免在子类中重复实现它们；但是抽象类不支持多继承。接口不能提供任何方法的实现，但是支持多继承。&lt;br /&gt;
接口代表了接口定义者和接口实现者的一种契约；而抽象类和具体类一般而言是一种继承的关系，即两者在概念本质上是不同。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>think-in-Java（第一章）</title>
      <link>https://leongravel.com/posts/think_in_java%E7%AC%AC%E4%B8%80%E7%AB%A0/</link>
      <pubDate>Wed, 06 Jun 2018 22:54:41 +0000</pubDate>
      
      <guid>https://leongravel.com/posts/think_in_java%E7%AC%AC%E4%B8%80%E7%AB%A0/</guid>
      <description>&lt;p&gt;在大学时候买了《Think  In java》这本书。最近开始重读，做一个笔记记录，并且谈谈我读这本书的感受。
这本书是由Bruce Eckel，这个人也许不熟悉，但是他的作品可是如雷贯耳啊，Bruce Eckel是MindView公司的总裁，这个公司提供一些软件资讯和培训。他是C++标准委员会拥有表决权的成员之一，拥有应用物理学学士和计算机工程硕士学位。Bruce Eckel从1984年至今，已经发表了超过150篇计算机技术文章，出版了6本书.他的《Thinking in C++》一本书在1995年被评为“最佳软件开发图书”，《Thinking in Java》被评为1999年Java World&lt;code&gt;最受读者欢迎图书&lt;/code&gt;，并且赢得了编辑首选图书奖。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>常见排序算法实现</title>
      <link>https://leongravel.com/posts/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 15 Apr 2018 20:54:41 +0000</pubDate>
      
      <guid>https://leongravel.com/posts/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;整理一下比较常见的几种排序算法&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tomcat启动报错</title>
      <link>https://leongravel.com/posts/tomcat_error/</link>
      <pubDate>Wed, 04 Apr 2018 20:54:41 +0000</pubDate>
      
      <guid>https://leongravel.com/posts/tomcat_error/</guid>
      <description>&lt;p&gt;今天启动项目的时候，tomcat报了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;are only available on JDK 1.5 and higher
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;的错。查了一些资料发现，这是因为jdk升级成为了jdk8，但是spring的jar包版本比较低，并没有兼容到jdk8，所以才造成了现在的这个错误。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mybatisXML配置以及XML映射文件</title>
      <link>https://leongravel.com/posts/mybatisxml%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8Axml%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6/</link>
      <pubDate>Fri, 22 Sep 2017 19:33:40 +0000</pubDate>
      
      <guid>https://leongravel.com/posts/mybatisxml%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8Axml%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;最近在公司内部技术交流会上分享了mybatis相关的配置资料，现在整理下弄到博客上面。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>