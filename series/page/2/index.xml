<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Series on Gravel`s blogs</title><link>https://leongravel.com/series/</link><description>Recent content in Series on Gravel`s blogs</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://leongravel.com/series/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker容器扩容</title><link>https://leongravel.com/post/docker-%E5%AE%B9%E5%99%A8%E6%89%A9%E5%AE%B9/</link><pubDate>Tue, 09 Oct 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/docker-%E5%AE%B9%E5%99%A8%E6%89%A9%E5%AE%B9/</guid><description>&lt;p>今天遇到一个问题，&lt;code>flink&lt;/code> 的 &lt;code>job manager&lt;/code> 分块，把容器的空间占满了，导致无法上传新的 &lt;code>job&lt;/code>。所以需要容器扩容。简单查了一下，做下记录。&lt;/p></description></item><item><title>git错误 HTTP Basic Access denied</title><link>https://leongravel.com/post/git%E9%94%99%E8%AF%AF-http-basic-access-denied/</link><pubDate>Mon, 08 Oct 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/git%E9%94%99%E8%AF%AF-http-basic-access-denied/</guid><description>问题症状 修改了git密码之后，拉取项目代码出错： git remote: HTTP Basic: Access denied 原因 远程服务端的用户名和密码与当前系统中git保存的用户名和密码有冲突 解决方案 git</description></item><item><title>Dubbo在Docker中的服务注册</title><link>https://leongravel.com/post/dubbo%E5%9C%A8docker%E4%B8%AD%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C/</link><pubDate>Fri, 28 Sep 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/dubbo%E5%9C%A8docker%E4%B8%AD%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C/</guid><description>&lt;p>今天在部署的时候，发现服务提供者启动成功，但是消费者没法拿到服务。查了下发现是服务提供者没注册成功。&lt;/p></description></item><item><title>拷贝文件到Docker容器中</title><link>https://leongravel.com/post/%E6%8B%B7%E8%B4%9D%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0docker%E5%AE%B9%E5%99%A8/</link><pubDate>Thu, 27 Sep 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/%E6%8B%B7%E8%B4%9D%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0docker%E5%AE%B9%E5%99%A8/</guid><description>&lt;p>查找需要拷贝的目的地容器&lt;/p></description></item><item><title>Docker 如何进入运行的tomcat容器</title><link>https://leongravel.com/post/%E5%A6%82%E4%BD%95%E8%BF%9B%E5%85%A5%E8%BF%90%E8%A1%8C%E7%9A%84tomcat%E5%AE%B9%E5%99%A8/</link><pubDate>Wed, 26 Sep 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/%E5%A6%82%E4%BD%95%E8%BF%9B%E5%85%A5%E8%BF%90%E8%A1%8C%E7%9A%84tomcat%E5%AE%B9%E5%99%A8/</guid><description>&lt;h3 id="问题描述">问题描述&lt;/h3>
&lt;p>当docker在 “-d”守护态运行tomcat容器的时候，，docker attach 容器id 就会一直卡着。
因为此时容器运行的进程是ssh，而不是/bin/bash 也没有虚拟终端（-it）参数，所以是进入不到的。&lt;/p></description></item><item><title>java-String知识点汇总</title><link>https://leongravel.com/post/%E5%85%B3%E4%BA%8Ejava-string%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</link><pubDate>Wed, 26 Sep 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/%E5%85%B3%E4%BA%8Ejava-string%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</guid><description>&lt;p>Java 的 String 类几乎是 Java 中最常使用到的对象类型，关于 String 的一些基础知识对开发者来说显得尤为重要。下面就对 String 相关的一些知识点进行列举和归纳，希望能够加深对 String 对象的认识。&lt;/p></description></item><item><title>tomcat启动报错</title><link>https://leongravel.com/post/tomcat%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/</link><pubDate>Fri, 21 Sep 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/tomcat%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/</guid><description>&lt;p>tomcat 启动报错&lt;/p></description></item><item><title>docker安装redis并使用外部配置和数据初始化</title><link>https://leongravel.com/post/docker%E5%AE%89%E8%A3%85redis%E5%B9%B6%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E5%92%8C%E6%95%B0%E6%8D%AE%E5%88%9D%E5%A7%8B%E5%8C%96/</link><pubDate>Wed, 19 Sep 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/docker%E5%AE%89%E8%A3%85redis%E5%B9%B6%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E5%92%8C%E6%95%B0%E6%8D%AE%E5%88%9D%E5%A7%8B%E5%8C%96/</guid><description>&lt;p>我这里安装的是&lt;code>redis:4.0&lt;/code>&lt;/p></description></item><item><title>Dubbo的工作原理简析</title><link>https://leongravel.com/post/dubbo%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E7%AE%80%E6%9E%90/</link><pubDate>Tue, 18 Sep 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/dubbo%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E7%AE%80%E6%9E%90/</guid><description>&lt;p>&lt;code>Dubbo&lt;/code>是一款高性能&lt;code>Java RPC&lt;/code>框架，目前 &lt;code>dubbo&lt;/code> 重启开源社区维护了，捐献给了 &lt;code>apache&lt;/code>，所以在项目建设初期，我们团队也使用了&lt;code>Dubbo&lt;/code>。&lt;/p></description></item><item><title>gitlab runner + docker 自动构建</title><link>https://leongravel.com/post/gitlabrunner-docker%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E9%95%9C%E5%83%8Fpush%E5%88%B0%E5%85%AC%E5%8F%B8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</link><pubDate>Tue, 11 Sep 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/gitlabrunner-docker%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E9%95%9C%E5%83%8Fpush%E5%88%B0%E5%85%AC%E5%8F%B8%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</guid><description>&lt;p>最开始的时候，我尝试&lt;code>Jenkins&lt;/code>+&lt;code>docker&lt;/code>，可是&lt;code>Jenkins&lt;/code>的&lt;code>docker&lt;/code>依赖和插件，实在太过麻烦，配置项等等，太重。所以我转为使用&lt;code>gitlab runner&lt;/code>来实现自动构建并打包镜像。&lt;/p></description></item><item><title>k8s集群搭建</title><link>https://leongravel.com/post/k8s%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</link><pubDate>Mon, 10 Sep 2018 20:54:41 +0000</pubDate><guid>https://leongravel.com/post/k8s%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</guid><description>&lt;h3 id="使用minikube单机部署">使用minikube单机部署&lt;/h3>
&lt;p>&lt;a href="https://github.com/kubernetes/minikube">minikube&lt;/a>是一个用go语言开发的可以在本地运行kubernetes的利器。首先，我们需要安装它：&lt;/p></description></item><item><title>Docker上传镜像到私服出错</title><link>https://leongravel.com/post/docker%E5%87%BA%E9%94%99/</link><pubDate>Wed, 05 Sep 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/docker%E5%87%BA%E9%94%99/</guid><description>&lt;p>今天在公司将自己的镜像上传到公司仓库的时候，出现了错误：&lt;/p></description></item><item><title>引入spring-cloud-starter-openfeign后有些类找不到</title><link>https://leongravel.com/post/springcloud-%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 03 Sep 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/springcloud-%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98/</guid><description>&lt;p>今天用ali maven重新导入的spring-cloud-starter-openfeign&lt;/p></description></item><item><title>Base64转CommonsMultipartFile</title><link>https://leongravel.com/post/base64/</link><pubDate>Mon, 27 Aug 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/base64/</guid><description>&lt;p>在做一个上传组件的时候，需要把前端传过来的 &lt;code>Base64&lt;/code> 的字符串转为 &lt;code>CommonsMultipartFile&lt;/code>，然后解析保存。&lt;/p></description></item><item><title>Redis简单讲解</title><link>https://leongravel.com/post/redis%E7%AE%80%E5%8D%95%E8%AE%B2%E8%A7%A3/</link><pubDate>Wed, 25 Jul 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/redis%E7%AE%80%E5%8D%95%E8%AE%B2%E8%A7%A3/</guid><description>&lt;h2 id="redis是什么">Redis是什么&lt;/h2>
&lt;p>Redis是由意大利人[Salvatore Sanfilippo][1]（网名：antirez）开发的一款内存高速缓存数据库。Redis全称为：Remote Dictionary Server（远程数据服务），该软件使用C语言编写，Redis是一个key-value存储系统，它支持丰富的数据类型，如：string、list、set、zset(sorted set)、hash。&lt;/p></description></item><item><title>spring-conditional</title><link>https://leongravel.com/post/spring-conditional/</link><pubDate>Sat, 21 Jul 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/spring-conditional/</guid><description>@Conditional 注解是 Spring 4 提供的基于条件的 Bean 的创建方式，Spring Boot 大量利用了这个特定来实现自动配置。比如，当某一个 jar 包在一个类路径下时，自动配置一个或</description></item><item><title>java基础以及进阶知识点总结</title><link>https://leongravel.com/post/java%E5%9F%BA%E7%A1%80%E4%BB%A5%E5%8F%8A%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 15 Jul 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/java%E5%9F%BA%E7%A1%80%E4%BB%A5%E5%8F%8A%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</guid><description>&lt;h3 id="抽象类和接口的比较">抽象类和接口的比较&lt;/h3>
&lt;p>相同点：&lt;br>
都不能被实例化 &lt;br>
都包含抽象方法，这些抽象方法用于描述系统能提供哪些服务，而这些服务是由子类来提供实现的&lt;br>
在系统设计上，两者都代表系统的抽象层，当一个系统使用一棵继承树上的类时，应该尽量把引用变量声明为继承树的上层抽象类型，这样可以提高两个系统之间的松耦合 &lt;br>
不同点：&lt;/p>
&lt;p>在抽象类中可以为部分方法提供默认的实现，从而避免在子类中重复实现它们；但是抽象类不支持多继承。接口不能提供任何方法的实现，但是支持多继承。&lt;br>
接口代表了接口定义者和接口实现者的一种契约；而抽象类和具体类一般而言是一种继承的关系，即两者在概念本质上是不同。&lt;/p></description></item><item><title>常用的几种设计模式</title><link>https://leongravel.com/post/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><pubDate>Sat, 14 Jul 2018 18:01:41 +0000</pubDate><guid>https://leongravel.com/post/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid><description>&lt;p>在《设计模式》这本书里，GoF定义了23种设计模式，个人能力有限，在实际使用或者业余编码过程中，并没有完全接触完全。这里我罗列一下在java中几种常用的设计模式。&lt;/p></description></item><item><title>springboot</title><link>https://leongravel.com/post/springboot/</link><pubDate>Wed, 11 Jul 2018 23:01:41 +0000</pubDate><guid>https://leongravel.com/post/springboot/</guid><description>&lt;h2 id="spring-boot-简介">Spring Boot 简介&lt;/h2>
&lt;p>Spring Boot(英文中是&lt;code>引导&lt;/code>的意思)，是用来简化Spring应用的搭建到开发的过程。应用开箱即用，只要通过 &lt;code>just run&lt;/code>（可能是 java -jar 或 tomcat 或 maven插件run 或 shell脚本），就可以启动项目。二者，Spring Boot 只要很少的Spring配置文件（例如那些xml，property）。 因为&lt;code>习惯优先于配置&lt;/code>的原则，使得Spring Boot在快速开发应用和微服务架构实践中得到广泛应用。 Javaer装好JDK环境和Maven工具就可以开始学习Boot了~&lt;/p></description></item><item><title>think-in-Java（第一章）</title><link>https://leongravel.com/post/think_in_java%E7%AC%AC%E4%B8%80%E7%AB%A0/</link><pubDate>Wed, 06 Jun 2018 22:54:41 +0000</pubDate><guid>https://leongravel.com/post/think_in_java%E7%AC%AC%E4%B8%80%E7%AB%A0/</guid><description>&lt;p>在大学时候买了《Think In java》这本书。最近开始重读，做一个笔记记录，并且谈谈我读这本书的感受。
这本书是由Bruce Eckel，这个人也许不熟悉，但是他的作品可是如雷贯耳啊，Bruce Eckel是MindView公司的总裁，这个公司提供一些软件资讯和培训。他是C++标准委员会拥有表决权的成员之一，拥有应用物理学学士和计算机工程硕士学位。Bruce Eckel从1984年至今，已经发表了超过150篇计算机技术文章，出版了6本书.他的《Thinking in C++》一本书在1995年被评为“最佳软件开发图书”，《Thinking in Java》被评为1999年Java World&lt;code>最受读者欢迎图书&lt;/code>，并且赢得了编辑首选图书奖。&lt;/p></description></item></channel></rss>